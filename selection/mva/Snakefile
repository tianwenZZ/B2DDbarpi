import os
from os.path import isfile, join

workpath=os.path.dirname(workflow.snakefile)

rule mva_train:
    '''
    do mva training
    '''
    input:
        script = "tools/TMVAClassification.py",
        files_mc = rules.merge_MC.output.files,
        files_bkg = rules.merge_data.output.files,
        mva_vars = "mva/vars_{mode}.yaml",
    params:
        method = "mva/MethodConf.yaml",
    output:
        dataset = directory("output/mva/train/{mode}/dataset"),
        files = output_path("mva/train/{mode}/tmva.root"),
        logs = output_path("mva/train/{mode}/logs/tmva.log"),
    shell:
        'python3 {input.script} --input-files-mc {input.files_mc} \
                                --input-files-bkg {input.files_bkg}\
                                --output-file {output.files} \
                                --output-ds {output.dataset} \
                                --method-config {params.method} \
                                --mode {wildcards.mode} \
                                --mva-vars {input.mva_vars} | tee {output.logs}'


rule mva_apply_data:
    '''
    do mva applying on data
    '''
    input:
        script = "tools/TMVAClassificationApplication.py",
        files = rules.merge_data.output.files,
        mva_vars = rules.mva_train.input.mva_vars,
        dataset = rules.mva_train.output.dataset, 
    params:
        method = rules.mva_train.params.method,
    output:
        files = output_path("mva/apply/data/{mode}/data_Run2.root"),
        logs = output_path("mva/apply/data/{mode}/logs/mva_apply.log"),
    shell:
        'python3 {input.script} --input-files {input.files} \
                                --input-ds  {input.dataset} \
                                --output-file {output.files} \
                                --method-config {params.method} \
                                --mode {wildcards.mode} \
                                --mva-vars {input.mva_vars} | tee {output.logs}'

rule mva_apply_MC:
    '''
    do mva applying on MC
    '''
    input:
        script = "tools/TMVAClassificationApplication.py",
        files = rules.merge_MC.output.files,
        mva_vars = rules.mva_train.input.mva_vars,
        dataset = rules.mva_train.output.dataset, 
    params:
        method = rules.mva_train.params.method,
    output:
        files = output_path("mva/apply/MC/{mode}/MC_Run2.root"),
        logs = output_path("mva/apply/MC/{mode}/logs/mva_apply.log"),
    shell:
        'python3 {input.script} --input-files {input.files} \
                                --input-ds  {input.dataset} \
                                --output-file {output.files} \
                                --method-config {params.method} \
                                --mode {wildcards.mode} \
                                --mva-vars {input.mva_vars} | tee {output.logs}'

rule mva_optimize:
    '''
    optimize Figure of Merit
    '''
    input:
        script = "tools/MVAOptimization.py",
        files_mc = rules.mva_apply_MC.output.files,
        files_data = rules.mva_apply_data.output.files,
    params:
        method = rules.mva_train.params.method,
        fit_params_path = output_path("mva/optimize/{mode}/"),
    output:
        files = output_path("mva/optimize/{mode}/graphs.root"),
        logs = output_path("mva/optimize/{mode}/optimize.log")
    shell:
        'python3 {input.script} --input-files-mc {input.files_mc} \
                                --input-files-data {input.files_data}\
                                --output-file {output.files}\
                                --fit-params-path {params.fit_params_path}\
                                --method-config {params.method} | tee {output.logs}'

rule draw_fom_curve:
    input:
        files = rules.mva_optimize.output.files,
        script = "tools/fom_curve.py",
    params:
        method = rules.mva_train.params.method,
    output:
        files = output_path("mva/optimize/{mode}/fom_curve.pdf"),
    shell:
        'python3 {input.script} --input-files {input.files} \
                                --input-tree-name fom_ \
                                --output-file {output.files} \
                                --method-config {params.method}'
MC2data_mode_dict={"B2DDpi": "B2DdDdPi",
                   "B2DpDstmpi": "B2DstDdPi2b",
                   "B2D0D0pi2b2b": "B2D0D0Pi2b2b",
                   "B2DstDstpi": "B2DstDstPi2b2b",
                   "B2DstpDmpi": "B2DstDdPi2b",
                   "B2D0D0pi2b4b": "B2D0D0Pi2b4b",
}

rule data_selection_for_charmlessbkg:
    '''
    Prepare the data sample to estimate the contribution from charmless background. The data sample is under the same selections as those for the nominal data sample, except the mass window cuts for D mesons.
    '''
    input:
        script = "tools/apply_selection.py",
        cuts = "charmlessbkg/{mode}/cuts.yaml",
        branches = "charmlessbkg/{mode}/branches.yaml",
        files = "/data5/lhcb/zhoutw/B2DDbarpi/data_download/data_split/data_{year}_{mag}.root",
    params:
        tree_name = lambda wildcards: MC2data_mode_dict[wildcards.mode]+"/DecayTree",
    output:
        files = output_path("charmlessbkg/data_for_check/preselection/{mode}/data_{year}_{mag}.root"),
        logs = output_path("charmlessbkg/data_for_check/preselection/{mode}/logs/data_{year}_{mag}.log"),
    shell:
        'python3 {input.script} --input-file {input.files} \
                                --input-tree-name {params.tree_name} \
                                --output-file {output.files} \
                                --mode {wildcards.mode} \
                                --selection-files {input.cuts} \
                                --branches-files {input.branches} | tee {output.logs}'

rule merge_sample:
    '''
    merge MagUp and MagDown and data-taking years
    '''
    input:
        expand(rules.data_selection_for_charmlessbkg.output.files,
                                                mode='{mode}',
                                                year=config["years"],
                                                mag=config["polarities"]),
    output:
        files = output_path("charmlessbkg/data_for_check/preselection/{mode}/data_All.root"),
    shell:
        'hadd {output.files} {input}'

rule apply_mva_for_charmless:
    input:
        files = rules.merge_sample.output.files,
        script = "tools/TMVAClassificationApplication.py",
        mva_vars = rules.mva_train.input.mva_vars,
        dataset = rules.mva_train.output.dataset, 
    params:
        method = rules.mva_train.params.method,
    output:
        files = output_path("charmlessbkg/data_for_check/mva/{mode}/data_All_aftermva.root"),
        logs = output_path("charmlessbkg/data_for_check/mva/{mode}/logs/data_All_aftermva.log"),
    shell:
        'python3 {input.script} --input-files {input.files} \
                                --input-ds  {input.dataset} \
                                --output-file {output.files} \
                                --method-config {params.method} \
                                --mode {wildcards.mode} \
                                --mva-vars {input.mva_vars} | tee {output.logs}'
        



rule prepare_sideband_trees_1:
    '''
    Prepare the trees of sideband data sample for B+ -> D Dbar pi+ decays. The sideband regions and signal region is labelled as D signal Dbar bkg (sb),  D bkg Dbar signal (bs), D bkg Dbar bkg (bb), and D signal D signal (ss), respectively.
    '''
    input:
        files = rules.apply_mva_for_charmless.output.files,
        script = "tools/apply_selection.py",
        cuts = "charmlessbkg/{mode}/cuts_for_charmless.yaml",
    output:
        files = output_path("charmlessbkg/data_for_check/{sideband_region}/{mode}/data_All_aftermva_{sideband_region}.root"),
        logs = output_path("charmlessbkg/data_for_check/{sideband_region}/{mode}/data_All_aftermva_{sideband_region}.log"),
    shell:
        'python3 {input.script} --input-file {input.files} \
                                --output-file {output.files} \
                                --output-tree-name tr_{wildcards.sideband_region} \
                                --mode {wildcards.sideband_region} \
                                --selection-files {input.cuts} \
                                --keep-all-original-branches True | tee {output.logs}'

rule prepare_sideband_trees_2:
    '''
    Merge the data_All_aftermva_{ss,sb,bs,bb}.root for each decay mode.
    '''
    input:
        files = expand(rules.prepare_sideband_trees_1.output.files, mode='{mode}', sideband_region=["ss", "sb", "bs", "bb"]),
        script = "charmlessbkg/MergeTrees.py",
    output:
        files = output_path("charmlessbkg/data_for_check/for_SDBscan/{mode}/data_All.root"),
        logs = output_path("charmlessbkg/data_for_check/for_SDBscan/{mode}/data_All.log"),
    shell:
        'python3 {input.script} --input-files {input.files} \
                                --output-file {output.files} | tee {output.logs}'

rule estimate_charmlessbkg_contribution:
    input:
        files = rules.prepare_sideband_trees_2.output.files,
        script = "tools/charmlessbkg.py",
    output:
        files = output_path("charmlessbkg/SDBscan/{mode}/scan.root"),
        logs = output_path("charmlessbkg/SDBscan/{mode}/logs/scan.log"),
    shell:
        'python3 {input.script} --input-file {input.files} \
                                --output-files {output.files} | tee {output.logs}'

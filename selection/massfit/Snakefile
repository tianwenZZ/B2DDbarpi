import os

rule apply_cuts_prefit_MC:
    '''
    Apply BDT and combined pid cuts before mass fit of MC
    '''
    input:
        script = "tools/apply_selection.py",
        cuts = "massfit/MC/{mode}/cuts.yaml",
        files = rules.mva_apply_MC.output.files,
    output:
        files = output_path("massfit/MC/{mode}/prefit/MC_Run2_prefit.root"),
        logs = output_path("massfit/MC/{mode}/prefit/logs/MC_Run2_prefit.log")
    shell:
        'python3 {input.script} --input-file {input.files} \
                                --output-file {output.files} \
                                --mode {wildcards.mode} \
                                --selection-files {input.cuts} | tee {output.logs}'

rule massfit_MC_float:
    '''
    Mass fit of MC
    '''
    input:
        script = "tools/fit_MC_for_shape.py",
        files = rules.apply_cuts_prefit_MC.output.files,
    output:
        funcs = output_path("massfit/MC/{mode}/shape_float/mc_shape.txt"),
        files = output_path("massfit/MC/{mode}/shape_float/fit_Bmass.pdf"),
        logs = output_path("massfit/MC/{mode}/shape_float/logs/fit_Bmass.log"),
    shell:
        'python3 {input.script} --input-files {input.files} \
                                --out-func {output.funcs} \
                                --output-files {output.files} \
                                --mode {wildcards.mode} | tee {output.logs}'

rule massfit_MC_frac_fixed:
    '''
    Mass fit of MC with fraction fixed, to determine the fraction of sigma2/sigma1.
    '''
    input:
        script = "tools/fit_MC_for_shape.py",
        files = rules.apply_cuts_prefit_MC.output.files,
        prerequisites = rules.massfit_MC_float.output.logs,
    params:
        frac = 0.3,
    output:
        funcs = output_path("massfit/MC/{mode}/shape_fixed/mc_shape_frac_fixed.txt"),
        files = output_path("massfit/MC/{mode}/shape_fixed/fit_Bmass_frac_fixed.pdf"),
        logs = output_path("massfit/MC/{mode}/shape_fixed/logs/fit_Bmass_frac_fixed.log"),
    shell:
        'python3 {input.script} --input-files {input.files} \
                                --out-func {output.funcs} \
                                --output-files {output.files} \
                                --mode {wildcards.mode} \
                                --frac {params.frac} | tee {output.logs}'


rule apply_cuts_prefit_data:
    '''
    Apply BDT and combined pid cuts before mass fit of data.
    '''
    input:
        script = "tools/apply_selection.py",
        cuts = "massfit/data/{mode}/cuts.yaml",
        files = rules.mva_apply_data.output.files,
    output:
        files = output_path("massfit/data/{mode}/prefit/data_Run2_prefit.root"),
        logs = output_path("massfit/data/{mode}/prefit/logs/data_Run2_prefit.log")
    shell:
        'python3 {input.script} --input-file {input.files} \
                                --output-file {output.files} \
                                --mode {wildcards.mode} \
                                --selection-files {input.cuts} | tee {output.logs}'

rule fit_data_sw:
    '''
    S-Fit the data sample.
    '''
    input:
        script = "tools/fit_mass_sweight.py",
        files = rules.apply_cuts_prefit_data.output.files,
        funcs = rules.massfit_MC_frac_fixed.output.funcs,
    output:
        files = output_path("massfit/data/{mode}/data_sw.root"),
        logs = output_path("massfit/data/{mode}/logs/fit_Bmass.log"),
        funcs = output_path("massfit/data/{mode}/data_shape.txt"),
        cfit_figs = output_path("massfit/data/{mode}/fit_Bmass.pdf"),
    shell:
        'python3 {input.script} --input-file {input.files} \
                                --in-func {input.funcs} \
                                --mode {wildcards.mode} \
                                --out-func {output.funcs} \
                                --cfit-figs {output.cfit_figs} \
                                --output-files {output.files} | tee {output.logs}'


rule fit_data_sw_manual:
    '''
    S-Fit the data sample for B2D0D0pi2b4b.
    '''
    input:
        script = "tools/fit_mass_sweight.py",
        files = rules.apply_selection_manual.output.files,
        funcs = expand(rules.massfit_MC_frac_fixed.output.funcs, mode="B2D0D0pi2b2b"),
    output:
        files = output_path("massfit/data/{mode}_manual/data_sw.root"),
        logs = output_path("massfit/data/{mode}_manual/logs/fit_Bmass.log"),
        funcs = output_path("massfit/data/{mode}_manual/data_shape.txt"),
        cfit_figs = output_path("massfit/data/{mode}_manual/fit_Bmass.pdf"),
    shell:
        'python3 {input.script} --input-file {input.files} \
                                --in-func {input.funcs} \
                                --mode {wildcards.mode} \
                                --out-func {output.funcs} \
                                --cfit-figs {output.cfit_figs} \
                                --output-files {output.files} | tee {output.logs}'

/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "RooExtendedCruijffPdf.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 

ClassImp(RooExtendedCruijffPdf); 

 RooExtendedCruijffPdf::RooExtendedCruijffPdf(const char *name, const char *title, 
                        RooAbsReal& _x,
                        RooAbsReal& _m0,
                        RooAbsReal& _sigma,
                        RooAbsReal& _alphaL,
                        RooAbsReal& _alphaR,
                        RooAbsReal& _beta) :
   RooAbsPdf(name,title), 
   x("x","x",this,_x),
   m0("m0","m0",this,_m0),
   sigma("sigma","sigma",this,_sigma),
   alphaL("alphaL","alphaL",this,_alphaL),
   alphaR("alphaR","alphaR",this,_alphaR),
   beta("beta","beta",this,_beta)
 { 
 } 


 RooExtendedCruijffPdf::RooExtendedCruijffPdf(const RooExtendedCruijffPdf& other, const char* name) :  
   RooAbsPdf(other,name), 
   x("x",this,other.x),
   m0("m0",this,other.m0),
   sigma("sigma",this,other.sigma),
   alphaL("alphaL",this,other.alphaL),
   alphaR("alphaR",this,other.alphaR),
   beta("beta",this,other.beta)
 { 
 } 



 Double_t RooExtendedCruijffPdf::evaluate() const 
 { 
   // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE 
   return x<m0?exp(-(x-m0)*(x-m0)*(1+beta*(x-m0)*(x-m0))/(2*sigma*sigma+alphaL*(x-m0)*(x-m0))):exp(-(x-m0)*(x-m0)*(1+beta*(x-m0)*(x-m0))/(2*sigma*sigma+alphaR*(x-m0)*(x-m0))) ; 
 } 



